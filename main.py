"""
Application de quiz multilingue pour l'apprentissage du vocabulaire.

Ce module permet de cr√©er des quiz interactifs pour apprendre le vocabulaire
en fran√ßais, allemand et espagnol √† travers diff√©rents th√®mes (couleurs, animaux,
nourriture, transport).
"""

import tkinter as tk
from tkinter import ttk
import json
import random

LANGUAGES = {
    "Fran√ßais": "fr",
    "Anglais": "en",
    "Allemand": "de",
    "Espagnol": "es"
}

class ColorQuizApp:
    """
    Application de quiz multilingue avec interface graphique Tkinter.
    
    Cette classe g√®re l'interface utilisateur et la logique du quiz pour
    l'apprentissage de vocabulaire dans plusieurs langues.
    
    Attributs:
        root: La fen√™tre principale Tkinter
        score: Score actuel du joueur
        total: Nombre total de questions pos√©es
        asked_questions: Ensemble des questions d√©j√† pos√©es
        theme: Th√®me s√©lectionn√© (Couleurs, Animaux, Nourriture, Transport)
        source_lang: Langue source pour les questions
        target_lang: Langue cible pour les r√©ponses
    """
    
    def __init__(self, root):
        """
        Initialise l'application de quiz.
        
        Args:
            root: La fen√™tre principale Tkinter
        """
        self.root = root
        self.root.title("Quiz Multilingue")
        self.score = 0
        self.total = 0
        self.asked_questions = set()

        self.theme = tk.StringVar(value="Couleurs")
        self.source_lang = tk.StringVar(value="Anglais")
        self.target_lang = tk.StringVar(value="Fran√ßais")

        self.setup_menu()
        self.load_themes()
        self.setup_quiz()

    def setup_menu(self):
        """
        Configure le menu principal avec les s√©lecteurs de langue et de th√®me.
        
        Cr√©e une interface avec des menus d√©roulants pour choisir:
        - La langue source (langue que l'utilisateur conna√Æt)
        - La langue cible (langue √† apprendre)
        - Le th√®me du quiz (Couleurs, Animaux, Nourriture, Transport)
        """
        frame = tk.Frame(self.root)
        frame.pack(pady=10)

        tk.Label(frame, text="Langue source :").grid(row=0, column=0)
        self.source_menu = ttk.Combobox(frame, textvariable=self.source_lang, values=list(LANGUAGES.keys()), state="readonly")
        self.source_menu.grid(row=0, column=1)

        tk.Label(frame, text="Langue cible :").grid(row=1, column=0)
        self.target_menu = ttk.Combobox(frame, textvariable=self.target_lang, values=list(LANGUAGES.keys()), state="readonly")
        self.target_menu.grid(row=1, column=1)

        tk.Label(frame, text="Th√®me :").grid(row=2, column=0)
        self.theme_menu = ttk.Combobox(frame, textvariable=self.theme, values=[], state="readonly")
        self.theme_menu.grid(row=2, column=1)

        tk.Button(frame, text="D√©marrer le quiz", command=self.start_quiz).grid(row=3, column=0, columnspan=2, pady=5)
        tk.Button(frame, text="Quitter", command=self.root.quit).grid(row=4, column=0, columnspan=2, pady=5)

    def load_themes(self):
        """
        Charge les donn√©es de vocabulaire depuis le fichier quiz_data.json.
        
        Lit le fichier JSON contenant tous les th√®mes et leur vocabulaire,
        puis remplit le menu d√©roulant des th√®mes disponibles.
        """
        with open("quiz_data.json", "r", encoding="utf-8") as f:
            data = json.load(f)
        self.all_data = data["themes"]
        self.theme_menu["values"] = list(self.all_data.keys())
        self.theme.set(list(self.all_data.keys())[0])

    def setup_quiz(self):
        """
        Configure l'interface du quiz.
        
        Cr√©e les √©l√©ments d'interface pour afficher:
        - La question/mot √† traduire
        - Le champ de saisie pour la r√©ponse
        - Le bouton de validation
        - Le retour visuel (correct/incorrect)
        - L'affichage du score
        """
        self.quiz_frame = tk.Frame(self.root)

        self.question_label = tk.Label(self.quiz_frame, text="", font=("Arial", 16))
        self.question_label.pack(pady=10)

        self.entry = tk.Entry(self.quiz_frame, font=("Arial", 14))
        self.entry.pack()

        self.submit_btn = tk.Button(self.quiz_frame, text="Valider", command=self.check_answer)
        self.submit_btn.pack(pady=5)

        self.feedback = tk.Label(self.quiz_frame, text="", font=("Arial", 14))
        self.feedback.pack()

        self.score_label = tk.Label(self.quiz_frame, text="Score : 0", font=("Arial", 12))
        self.score_label.pack()

    def start_quiz(self):
        """
        D√©marre une nouvelle session de quiz.
        
        Initialise le quiz avec le th√®me et les langues s√©lectionn√©s.
        V√©rifie que la langue source et cible sont diff√©rentes.
        R√©initialise le score et commence √† poser les questions.
        """
        self.src = LANGUAGES[self.source_lang.get()]
        self.tgt = LANGUAGES[self.target_lang.get()]
        selected_theme = self.theme.get()

        if self.src == self.tgt:
            self.feedback.config(text="‚ùå Langue source et cible identiques !", fg="red")
            return

        self.current_data = self.all_data[selected_theme]
        for word in self.current_data:
            self.current_data[word]["en"] = word

        self.words_list = list(self.current_data.keys())
        self.asked_questions.clear()
        self.score = 0
        self.total = 0

        self.quiz_frame.pack_forget()
        self.quiz_frame.pack(pady=10)
        self.ask_question()

    def ask_question(self):
        """
        Affiche la prochaine question du quiz.
        
        S√©lectionne al√©atoirement un mot parmi ceux qui n'ont pas encore √©t√© pos√©s.
        Si toutes les questions ont √©t√© pos√©es, affiche le message de fin.
        Pr√©pare l'interface pour la nouvelle question.
        """
        if len(self.asked_questions) == len(self.words_list):
            self.question_label.config(text="üéâ Fin du quiz !")
            self.submit_btn.config(state="disabled")
            self.entry.config(state="disabled")
            return

        remaining_words = list(set(self.words_list) - self.asked_questions)
        self.current_word = random.choice(remaining_words)
        self.asked_questions.add(self.current_word)

        self.question_text = self.current_data[self.current_word].get(self.src, self.current_word)
        self.current_answer = self.current_data[self.current_word].get(self.tgt, self.current_word)

        self.question_label.config(text=f"Traduire : {self.question_text}")
        self.entry.delete(0, tk.END)
        self.feedback.config(text="")

    def check_answer(self):
        """
        V√©rifie la r√©ponse de l'utilisateur et met √† jour le score.
        
        Compare la r√©ponse saisie avec la traduction correcte.
        Ajoute 10 points pour une bonne r√©ponse, retire 5 points pour une mauvaise.
        Affiche un retour visuel et passe √† la question suivante apr√®s 1,5 seconde.
        """
        user_input = self.entry.get().strip().lower()
        correct = self.current_answer.lower()
        self.total += 1

        if user_input == correct:
            self.score += 10
            self.feedback.config(text="‚úÖ Correct !", fg="green")
        else:
            self.score = max(0, self.score - 5)
            self.feedback.config(text=f"‚ùå Faux ! R√©p. : {self.current_answer}", fg="red")

        self.score_label.config(text=f"Score : {self.score}")
        self.root.after(1500, self.ask_question)

# Lancer l'application
if __name__ == "__main__":
    root = tk.Tk()
    app = ColorQuizApp(root)
    root.mainloop()